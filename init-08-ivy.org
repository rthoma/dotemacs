# TITLE: init-08-ivy
# DATE: <2016-06-25 Sat>
#+AUTHOR: rthoma
#+STARTUP: indent
#+STARTUP: content

* This file configures [[https://www.melpa.org/#/ivy][ivy]], [[https://github.com/abo-abo/swiper/][swiper]], and [[http://melpa.org/#/counsel][counsel]]

** Use [[https://github.com/abo-abo/swiper][ivy]] as our generic completion front end
If =ivy= isn't already installed, retrieve it from the GNU ELPA repository.
I can't say enough good things about this package. Credit to the developer, 
[[https://github.com/abo-abo][Oleh Krehel]]. I believe =ivy= was originally a part of =swiper=, but it is now
available as a standalone package on [[https://melpa.org/#/ivy][MELPA]]. Use =swiper= as a replacement for 
isearch and =counsel= to enhance ivy's completion facilities.

#+BEGIN_SRC emacs-lisp :tangle yes :padline no
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; init-08-ivy.el
;; Emacs, Version 25.1.50 (9.0)
;; OS X Yosemite, Version 10.10.5
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ivy setup
;;
(use-package ivy
  ;;
  ;; Package preferences
  ;;
  :ensure t
  :pin gnu
  ;;
  ;; Pre-load initialization
  ;;
  :init
  (progn
    (setq ivy-height 6
          ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "))
  ;;
  ;; After load configuration
  ;;
  :config
  (progn
    (when (fboundp 'ivy-mode) (ivy-mode 1))

    (bind-keys :map ivy-mode-map
               ("C-c C-f" . ivy-recentf))

    (use-package swiper
      :ensure t
      :pin melpa-stable
      :init
      :config
      (bind-keys :map ivy-mode-map
                 ("C-s" . swiper)))

    (use-package counsel
      :ensure t
      :pin melpa-stable
      :init
      :config
      (progn
        (when (fboundp 'counsel-mode) (counsel-mode 1))

        (bind-keys :map counsel-mode-map
                   ("M-x" . counsel-M-x)
                   ("C-x C-f" . counsel-find-file)
                   ("C-c g" . counsel-git)
                   ("C-c j" . counsel-git-grep)
                   ("C-c k" . counsel-ag)
                   ("C-x l" . counsel-locate)
                   ("C-S-o" . counsel-rhythmbox))

        (bind-keys :map read-expression-map
                   ("C-r" . counsel-expression-history))))))

;; eof
#+END_SRC

# EOF
